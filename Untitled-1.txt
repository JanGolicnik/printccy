#include <stdio.h>
#include <stdarg.h> 

void my_print_int(va_list* list, const char* args, int n_args) {
    int val = va_arg(*list, int);
    printf("(int %d with args: %.*s)", val, n_args, args);
}

void my_print_float(va_list* list, const char* args, int n_args) {
    float val = va_arg(*list, double);
    printf("(float %f with args: %.*s)", val, n_args, args);
}

void my_print_double(va_list* list, const char* args, int n_args) {
    double val = va_arg(*list, double);
    printf("(double %f with args: %.*s)", val, n_args, args);
}

typedef void(_my_print_func)(va_list*, const char*, int);
_Thread_local _my_print_func* _my_print_funcs[128];
_Thread_local _my_print_func** _my_funcs_ptr = NULL;

void _my_print(const char* fmt, int n, ...)
{
    va_list args; va_start(args, n);
    _my_funcs_ptr = _my_print_funcs;
    
    char c;
    while (c = *(fmt++)) {
      if (c != '{')
      {        
        putchar(c);
        continue;
      }
      
      const char* start = fmt;
      while(*(++fmt) && *fmt != '}') {}
      
      (*_my_funcs_ptr++)(&args, start, fmt - start);
      
      fmt++;
    }
    
    va_end(args);
}


#define __NARG__(...)  __NARG_I_( __VA_ARGS__, __RSEQ_N() )
#define __NARG_I_(...) __ARG_N( __VA_ARGS__ )
#define __ARG_N( _1, _2, _3, _4, _5, _6, _7, N, ... ) N
#define __RSEQ_N() 7, 6, 5, 4, 3, 2, 1, 0

#define _MY_MATCH_ARG_TYPE_BASE int: &my_print_int, float: &my_print_float, double: &my_print_double

#ifndef _MY_MATCH_ARG_TYPE_CUSTOM
// should be defined with a comma in front: #define _MY_MATCH_ARG_TYPE_CUSTOM , my_type: ...
#define _MY_MATCH_ARG_TYPE_CUSTOM
#endif // _MY_MATCH_ARG_TYPE_CUSTOM

#ifndef _MY_MATCH_ARG_TYPE
#define _MY_MATCH_ARG_TYPE(X) _Generic((X), _MY_MATCH_ARG_TYPE_BASE _MY_MATCH_ARG_TYPE_CUSTOM, default: 0)
#endif // _MY_MATCH_ARG_TYPE

#define _MY_ASSERT(expr, msg) sizeof(struct { _Static_assert(expr, msg); int _dummy; })
#define _MY_ASSERT_NON_ZERO_OR_EVAL(expr, msg) (_MY_ASSERT(expr != 0, msg), expr)

#define _MY_FILL_FPTR(X) *(_my_funcs_ptr++) = _MY_ASSERT_NON_ZERO_OR_EVAL(_MY_MATCH_ARG_TYPE(X), "unsupported type of variable " #X)

#define _MY_FILL_FPTR1(_0) _MY_FILL_FPTR(_0)
#define _MY_FILL_FPTR2(_0, _1) _MY_FILL_FPTR(_0); _MY_FILL_FPTR(_1)
#define _MY_FILL_FPTR3(_0, _1, _2) _MY_FILL_FPTR(_0); _MY_FILL_FPTR(_1); _MY_FILL_FPTR(_2)
#define _MY_FILL_FPTR4(_0, _1, _2, _3) _MY_FILL_FPTR(_0); _MY_FILL_FPTR(_1); _MY_FILL_FPTR(_2); _MY_FILL_FPTR(_3)
#define _MY_FILL_FPTR5(_0, _1, _2, _3, _4) _MY_FILL_FPTR(_0); _MY_FILL_FPTR(_1); _MY_FILL_FPTR(_2); _MY_FILL_FPTR(_3); _MY_FILL_FPTR(_4)
#define _MY_FILL_FPTR6(_0, _1, _2, _3, _4, _5) _MY_FILL_FPTR(_0); _MY_FILL_FPTR(_1); _MY_FILL_FPTR(_2); _MY_FILL_FPTR(_3); _MY_FILL_FPTR(_4); _MY_FILL_FPTR(_5)
#define _MY_FILL_FPTR7(_0, _1, _2, _3, _4, _5, _6) _MY_FILL_FPTR(_0); _MY_FILL_FPTR(_1); _MY_FILL_FPTR(_2); _MY_FILL_FPTR(_3); _MY_FILL_FPTR(_4); _MY_FILL_FPTR(_5); _MY_FILL_FPTR(_6)

#define _MY_OVERLOAD_MACRO(_0, _1, _2, _3, _4, _5, _6, MACRO_NAME, ...) MACRO_NAME

#define PRINT(fmt, ...) do { _my_funcs_ptr = _my_print_funcs;\
                        _MY_OVERLOAD_MACRO( __VA_ARGS__, _MY_FILL_FPTR7, _MY_FILL_FPTR6, _MY_FILL_FPTR5, _MY_FILL_FPTR4, _MY_FILL_FPTR3, _MY_FILL_FPTR2, _MY_FILL_FPTR1 )( __VA_ARGS__ );\
                        _my_print(fmt, __NARG__( __VA_ARGS__ ), __VA_ARGS__ );\
                      } while(0)

int main()
{
    PRINT("hey\n{hex}\n{.3}\n{.4}", 1, 2.0f, 3.0);
}
